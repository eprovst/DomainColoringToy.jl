var documenterSearchIndex = {"docs":
[{"location":"lib/#DomainColoringToy","page":"Library","title":"DomainColoringToy","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"DomainColoringToy is an auxiliary package building on DomainColoring.jl which preloads GLMakie and rerenders the plot when the user zooms in or pans around.","category":"page"},{"location":"lib/","page":"Library","title":"Library","text":"The exported functions and arguments are identical to DomainColoring.jl with the addition of the acceptance of :auto in place of an integer in the pixels keyword argument. A direction which is set to :auto will use the viewport resolution to determine the number of samples. Note that this can make plotting very slow.","category":"page"},{"location":"lib/","page":"Library","title":"Library","text":"Finally, in a similar fashion to DomainColoring.@shadedplot, one can use DomainColoringToy.@shadedplot to create custom plots.","category":"page"},{"location":"lib/#Installation","page":"Library","title":"Installation","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"DomainColoringToy is a different package and hence has to be installed separately. Installation is as usual:","category":"page"},{"location":"lib/","page":"Library","title":"Library","text":"]add DomainColoringToy","category":"page"},{"location":"lib/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/#Public-Interface","page":"Library","title":"Public Interface","text":"","category":"section"},{"location":"lib/#DomainColoringToy.checkerplot","page":"Library","title":"DomainColoringToy.checkerplot","text":"checkerplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n    kwargs...\n)\n\nTakes a complex function and produces a checker plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black and white stripes orthogonal to the real axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nimag plots black and white stripes orthogonal to the imaginary axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black and white stripes orthogonal to the phase angle at a rate of eight stripes per full rotation. Can be set to an integer to specify a different rate.\nabs plots black and white stripes at a rate of one stripe per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\nhicontrast uses black and white instead of the softer defaults.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.checkerplot!","page":"Library","title":"DomainColoringToy.checkerplot!","text":"checkerplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n    kwargs...\n)\n\nTakes a complex function and produces a checker plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black and white stripes orthogonal to the real axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nimag plots black and white stripes orthogonal to the imaginary axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black and white stripes orthogonal to the phase angle at a rate of eight stripes per full rotation. Can be set to an integer to specify a different rate.\nabs plots black and white stripes at a rate of one stripe per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\nhicontrast uses black and white instead of the softer defaults.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.domaincolor","page":"Library","title":"DomainColoringToy.domaincolor","text":"domaincolor(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces its domain coloring plot as an interactive GLMakie plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or alpha. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and alpha changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function Î¸ -> Color. If set to :print a desaturated version of the default is used.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.domaincolor!","page":"Library","title":"DomainColoringToy.domaincolor!","text":"domaincolor(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces its domain coloring plot as an interactive GLMakie plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or alpha. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and alpha changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function Î¸ -> Color. If set to :print a desaturated version of the default is used.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.pdphaseplot","page":"Library","title":"DomainColoringToy.pdphaseplot","text":"pdphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBC1 cyclic color map for protanopic and deuteranopic viewers as an interactive GLMakie plot.\n\nYellow corresponds to phase 0, white to fracpi2, blue to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.pdphaseplot!","page":"Library","title":"DomainColoringToy.pdphaseplot!","text":"pdphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBC1 cyclic color map for protanopic and deuteranopic viewers as an interactive GLMakie plot.\n\nYellow corresponds to phase 0, white to fracpi2, blue to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.sawplot","page":"Library","title":"DomainColoringToy.sawplot","text":"sawplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces a saw plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function Î¸ -> Color. If set to :print a desaturated version of the default is used.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.sawplot!","page":"Library","title":"DomainColoringToy.sawplot!","text":"sawplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces a saw plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function Î¸ -> Color. If set to :print a desaturated version of the default is used.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.tphaseplot","page":"Library","title":"DomainColoringToy.tphaseplot","text":"tphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBTC1 cyclic color map for titranopic viewers as an interactive GLMakie plot.\n\nRed corresponds to phase 0, white to fracpi2, cyan to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.tphaseplot!","page":"Library","title":"DomainColoringToy.tphaseplot!","text":"tphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBTC1 cyclic color map for titranopic viewers as an interactive GLMakie plot.\n\nRed corresponds to phase 0, white to fracpi2, cyan to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#Package-Internals","page":"Library","title":"Package Internals","text":"","category":"section"},{"location":"lib/#DomainColoringToy.shadedplot","page":"Library","title":"DomainColoringToy.shadedplot","text":"DomainColoringToy.shadedplot(\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n    pixels = (480, 480);\n    kwargs...\n)\n\nTakes a complex function and a shader and produces a GLMakie plot with auto updating.\n\nArguments\n\nf is the complex function to plot.\nshader is the shader function to compute a pixel.\nlimits are the initial limits of the plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nKeyword arguments are passed to GLMakie.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.shadedplot!","page":"Library","title":"DomainColoringToy.shadedplot!","text":"DomainColoringToy.shadedplot(\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n    pixels = (480, 480);\n    kwargs...\n)\n\nTakes a complex function and a shader and produces a GLMakie plot with auto updating.\n\nArguments\n\nf is the complex function to plot.\nshader is the shader function to compute a pixel.\nlimits are the initial limits of the plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nKeyword arguments are passed to GLMakie.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.@shadedplot-Tuple{Any, Any, Any}","page":"Library","title":"DomainColoringToy.@shadedplot","text":"DomainColoringToy.@shadedplot(\n    basename,\n    shaderkwargs,\n    shader\n)\n\nMacro emitting implementations of fname and fname! in a similar fashion to the other plotting routines in this library, see for instance domaincolor.\n\nshaderkwargs is a named tuple setting keyword arguments used in the expression shader. The result of shader should be a function Complex -> Color and is used to shade the resulting plot.\n\nSee the source for examples.\n\n\n\n\n\n","category":"macro"},{"location":"#DomainColoringToy.jl:-Interactive-Smooth-Complex-Plotting","page":"Home","title":"DomainColoringToy.jl: Interactive Smooth Complex Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nDomainColoringToy.jl has been superseded by ComplexToys.jl. Install  using using Pkg; pkg\"add ComplexToys\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of DomainColoringToy.jl, a collection of various ways to plot complex functions for research, teaching, and fun, using GLMakie.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div align=\"center\">\n  <img src=\"assets/logo.png\" width=300 />\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Even more plots are defined by ComplexToys.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots implemented here are inspired by the wonderful book by Wegert[1], yet using a smooth curve through Oklab space, yielding a more perceptually uniform representation of the phase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: Elias Wegert, Visual Complex Functions: An Introduction with Phase Portraits (Basel, 2012).","category":"page"}]
}
